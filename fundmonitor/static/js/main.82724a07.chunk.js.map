{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["chart_options_template","responsive","maintainAspectRatio","scales","xAxes","type","time","unit","chart_template","labels","datasets","label","fill","backgroundColor","borderColor","pointRadius","data","App","props","state","fundPricesChart","chart_options","handleChange","bind","handleButtonClick","timePeriod","nowDate","Date","now","startDate","setFullYear","getFullYear","setMonth","getMonth","this","calculateStartDate","console","log","datapoints","ma50","ma200","i","len","length","date","push","price","chartOptions","setState","fetch","process","then","res","json","updateChart","catch","fetchdata","href","className","id","onClick","options","e","document","getElementById","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.82724a07.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Line} from 'react-chartjs-2';\n\nconst INITIAL_TIME_PERIOD = \"1_year\";\n\nconst chart_options_template = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n        xAxes: [{\n            type: \"time\",\n            time: {\n                unit: 'month'\n            }\n        }]\n    }\n}\n\nconst chart_template = {\n    labels: [],\n    datasets: [\n        {\n            label: 'SPP Aktiefond Global',\n            fill: false,\n            backgroundColor: 'rgb(17,17,17)',\n            borderColor: 'rgb(17,17,17)',\n            pointRadius: 1,\n            data: []\n        },\n        {\n            label: 'SPP Aktiefond Global (MA50)',\n            fill: false,\n            backgroundColor: 'rgb(255,220,0)',\n            borderColor: 'rgb(255,220,0)',\n            pointRadius: 1,\n            data: []\n        },\n        {\n            label: 'SPP Aktiefond Global (MA200)',\n            fill: false,\n            backgroundColor: 'rgb(0,116,217)',\n            borderColor: 'rgb(0,116,217)',\n            pointRadius: 1,\n            data: []\n        }\n    ]\n};\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {fundPricesChart: chart_template, chart_options: chart_options_template};\n        this.data = null;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n    }\n\n\n    calculateStartDate(timePeriod) {\n        let nowDate = new Date(Date.now());\n        let startDate = nowDate;\n\n        if(timePeriod === \"1_year\") {\n            startDate.setFullYear(nowDate.getFullYear() - 1);\n        } else if (timePeriod === \"1_month\") {\n            startDate.setMonth(nowDate.getMonth() - 1);\n        } else if(timePeriod === \"3_years\") {\n            startDate.setFullYear(nowDate.getFullYear() - 3);\n        }\n\n        return startDate;\n    }\n\n    updateChart(timePeriod) {\n        let startDate = this.calculateStartDate(timePeriod);\n        console.log(\"startDate: \" + startDate);\n        let labels = []\n        let datapoints = []\n        let ma50 = []\n        let ma200 = []\n        let i = 0;\n        let len = this.data.length;\n        for (; i < len; i += 1) {\n            let currentDate = new Date(this.data[i].date);\n\n            if (currentDate < startDate) {\n                continue;\n            }\n\n            labels.push(this.data[i].date);\n            datapoints.push(this.data[i].price);\n            ma50.push(this.data[i].ma50)\n            ma200.push(this.data[i].ma200)\n        }\n\n        var fundPricesChart = chart_template;\n\n        fundPricesChart.labels = labels;\n        fundPricesChart.datasets[0].data = datapoints;\n        fundPricesChart.datasets[1].data = ma50;\n        fundPricesChart.datasets[2].data = ma200;\n\n        let chartOptions = chart_options_template;\n        if (timePeriod === \"1_month\") {\n            chartOptions.scales.xAxes[0].time.unit = 'day';\n        } else {\n            chartOptions.scales.xAxes[0].time.unit = 'month';\n        }\n\n        this.setState({fundPricesChart: fundPricesChart, chartOptions: chartOptions});\n    }\n\n    fetchdata() {\n        console.log(\"running fetchdata\");\n        let url = process.env.REACT_APP_BACKEND_HOST + \"/api/fundmonitor/fundpricesdatesorted\";\n        fetch(url)\n            .then(res => res.json())\n            .then((data) => {\n                this.data = data;\n                this.updateChart(INITIAL_TIME_PERIOD);\n            })\n            .catch(console.log)\n    }\n\n\n    componentDidMount() {\n        console.log(\"componentDidMount\");\n        this.fetchdata();\n    }\n\n\n    render() {\n        return (\n            <div>\n                <h1>Fund Monitor App</h1>\n                <p>The Fund Monitor app shows fund price data for a fund named SPP Aktiefond Global and corresponding\n                    moving averages for 50 and 200 days. New fund price data is added to the MongoDB database every night by crawling\n                    the web using Selenium. The app was created by <a href=\"https://twitter.com/jcmossberg\">Jacob Mossberg</a> to\n                    learn the following among other things:</p>\n                <ul>\n                    <li><a href=\"https://reactjs.org/\">ReactJS</a></li>\n                    <li><a href=\"https://www.chartjs.org/\">Chart.js</a></li>\n                    <li><a href=\"https://spring.io/projects/spring-boot\">Java Spring Boot</a></li>\n                    <li><a href=\"https://www.mongodb.com/\">MongoDB</a></li>\n                    <li><a href=\"https://www.selenium.dev/\">Selenium</a></li>\n                    <li><a href=\"https://www.rabbitmq.com/\">RabbitMQ</a></li>\n                </ul>\n                <p>The data presented on this page might be wrong.</p>\n                <div className=\"button-div\">\n                    <button id=\"1_month\" className=\"button\" onClick={this.handleButtonClick}>1 month</button>\n                    <button id=\"1_year\" className=\"button_active\" onClick={this.handleButtonClick}>1 year</button>\n                    <button id=\"3_years\" className=\"button\" onClick={this.handleButtonClick}>3 years</button>\n                </div>\n                <div className=\"line-div\">\n                    <Line data={this.state.fundPricesChart} options={this.state.chart_options}/>\n                </div>\n            </div>\n        );\n\n    }\n\n    handleButtonClick(e) {\n        document.getElementById(\"1_month\").className = \"button\";\n        document.getElementById(\"1_year\").className = \"button\";\n        document.getElementById(\"3_years\").className = \"button\";\n\n        document.getElementById(e.target.id).className = \"button_active\";\n        console.log(\"Set background color blue of id \" + e.target.id);\n\n        this.updateChart(e.target.id);\n\n    }\n\n    handleChange(e) {\n        console.log(e.target.value);\n        this.updateChart(e.target.value);\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}